// Â≠òÂÇ®ÊâÄÊúâÂçïËØçÊï∞ÊçÆ
let allWords = [];
// Â≠òÂÇ®ÊØèËΩÆÂ§ç‰π†ÁöÑÂçïËØç
let reviewRounds = Array(9).fill().map(() => []);
// ÂΩìÂâçÂ§ç‰π†ËΩÆÊ¨°
let currentRound = 0;
// ÂΩìÂâçÂçïËØçÁ¥¢Âºï
let currentWordIndex = 0;
// Â≠òÂÇ®ÂèØÁî®ÁöÑËØ≠Èü≥
let voices = [];
// Ê∑ªÂä†Áî®Êà∑Áõ∏ÂÖ≥ÂèòÈáè
let currentUser = null;
// Âú®Êñá‰ª∂ÂºÄÂ§¥Ê∑ªÂä†ÈáçÁÇπÂçïËØçÁõ∏ÂÖ≥ÂèòÈáè
let importantWords = new Set();
// Ê∑ªÂä†ËøΩÂä†Ê®°ÂºèÁä∂ÊÄÅÂèòÈáè
let isAppendMode = false;
// Ê∑ªÂä†ÊòæÁ§∫Ê®°ÂºèÂèòÈáè
let showEnglish = true; // trueÊòæÁ§∫Ëã±ÊñáÔºåfalseÊòæÁ§∫‰∏≠Êñá

// Ê∑ªÂä†ÊéàÊùÉÁ†ÅÂàóË°®ÂíåÈÄöÁî®ÊéàÊùÉÁ†Å
const AUTH_CODES = new Set([
    'SUN2024A01', 'SUN2024A02',
    'SUN2024A03', 'SUN2024A04',
    'SUN2024A05', 'SUN2024A06',
    'SUN2024A07', 'SUN2024A08',
    'SUN2024A09', 'SUN2024A10',
    'SUN2024B01', 'SUN2024B02',
    'SUN2024B03', 'SUN2024B04',
    'SUN2024B05', 'SUN2024B06',
    'SUN2024B07', 'SUN2024B08',
    'SUN2024B09', 'SUN2024B10',
    'SUNNY888888' // ÈÄöÁî®ÊéàÊùÉÁ†Å
]);

// ËÆæÁΩÆÂà∞ÊúüÊó∂Èó¥
const EXPIRATION_DATE = new Date('2024-03-31T23:59:59+08:00');

// ‰øÆÊîπÊó•ÊúüÊØîËæÉÂáΩÊï∞
function isExpired() {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const expirationDay = new Date(EXPIRATION_DATE.getFullYear(), EXPIRATION_DATE.getMonth(), EXPIRATION_DATE.getDate());
    return today > expirationDay;
}

// ÂàùÂßãÂåñËØ≠Èü≥
function initVoices() {
    // Á≠âÂæÖËØ≠Èü≥ÂàóË°®Âä†ËΩΩÂÆåÊàê
    window.speechSynthesis.onvoiceschanged = function() {
        voices = window.speechSynthesis.getVoices().filter(voice => voice.lang.includes('en'));
        console.log('ÂèØÁî®ÁöÑËã±ËØ≠ËØ≠Èü≥Ôºö', voices);
    };
    // È¶ñÊ¨°Âä†ËΩΩËØ≠Èü≥ÂàóË°®
    voices = window.speechSynthesis.getVoices().filter(voice => voice.lang.includes('en'));
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñËØ≠Èü≥
window.onload = function() {
    initVoices();
};

// ‰ΩøÁî®ÊµèËßàÂô®ÁöÑËØ≠Èü≥ÂêàÊàêÂäüËÉΩÂèëÈü≥
function speak(text, voiceIndex = 0) {
    if ('speechSynthesis' in window) {
        // ÂèñÊ∂à‰πãÂâçÁöÑËØ≠Èü≥
        window.speechSynthesis.cancel();

        const utterance = new SpeechSynthesisUtterance(text);
        // Â¶ÇÊûúÊúâÂèØÁî®ÁöÑËã±ËØ≠ËØ≠Èü≥Ôºå‰ΩøÁî®Á¨¨‰∏Ä‰∏™
        if (voices.length > voiceIndex) {
            utterance.voice = voices[voiceIndex];
        }
        utterance.lang = 'en-US';
        utterance.rate = 0.9;
        utterance.pitch = 1;
        
        // Ê∑ªÂä†ËØ≠Èü≥‰∫ã‰ª∂ÁõëÂê¨
        utterance.onstart = () => console.log('ÂºÄÂßãÊí≠ÊîæËØ≠Èü≥');
        utterance.onend = () => console.log('ËØ≠Èü≥Êí≠ÊîæÁªìÊùü');
        utterance.onerror = (event) => console.error('ËØ≠Èü≥Êí≠ÊîæÈîôËØØÔºö', event);

        window.speechSynthesis.speak(utterance);
    } else {
        console.log('ÊµèËßàÂô®‰∏çÊîØÊåÅËØ≠Èü≥ÂêàÊàê');
    }
}

// ‰ΩøÁî®‰∏çÂêåÁöÑÂ£∞Èü≥ÂèëÈü≥
function speakWithDifferentVoice(text) {
    const currentVoiceIndex = Math.floor(Math.random() * voices.length);
    speak(text, currentVoiceIndex);
}

// ÂèëÈü≥ÂΩìÂâçÂçïËØç
function pronounceWord() {
    const currentWord = reviewRounds[currentRound][currentWordIndex];
    if (currentWord) {
        speakWithDifferentVoice(currentWord.word);
    }
}

// Êõ¥Êñ∞ÂçïËØçÂàóË°®ÊòæÁ§∫
function updateWordList() {
    const wordListDiv = document.getElementById('wordList');
    wordListDiv.innerHTML = '';
    
    const toggleContainer = document.createElement('div');
    toggleContainer.style.marginBottom = '10px';
    toggleContainer.style.textAlign = 'right';
    
    const toggleButton = document.createElement('button');
    toggleButton.id = 'toggleDisplayMode';
    toggleButton.className = 'control-button';
    toggleButton.textContent = showEnglish ? 'ÊòæÁ§∫‰∏≠Êñá' : 'ÊòæÁ§∫Ëã±Êñá';
    toggleButton.onclick = toggleDisplayMode;
    toggleButton.style.marginBottom = '10px';
    
    toggleContainer.appendChild(toggleButton);
    wordListDiv.appendChild(toggleContainer);
    
    allWords.forEach((word, index) => {
        // Âè™ÊòæÁ§∫Â∑≤Â≠¶‰π†ËøáÁöÑÂçïËØçÔºàattempts > 0Ôºâ
        if (word.attempts > 0) {
            const wordItem = document.createElement('div');
            wordItem.className = 'word-list-item';
            wordItem.style.display = 'flex';
            wordItem.style.alignItems = 'center';
            wordItem.style.gap = '5px';
            wordItem.style.position = 'relative';
            wordItem.style.minHeight = '40px';
            
            const contentContainer = document.createElement('div');
            contentContainer.style.flex = '1';
            contentContainer.style.display = 'flex';
            contentContainer.style.alignItems = 'center';
            contentContainer.style.gap = '5px';
            contentContainer.style.minWidth = '0';
            contentContainer.style.marginRight = '150px';
            
            // ÂàõÂª∫ÈáçÁÇπÊ†áËÆ∞ÔºàÁ∫¢ÁÇπÔºâ
            const importantDot = document.createElement('span');
            importantDot.style.width = '6px';
            importantDot.style.height = '6px';
            importantDot.style.borderRadius = '50%';
            importantDot.style.backgroundColor = importantWords.has(word.word) ? '#ff4444' : 'transparent';
            importantDot.style.display = 'inline-block';
            importantDot.style.flexShrink = '0';
            importantDot.style.marginRight = '3px';
            importantDot.style.cursor = 'pointer';
            importantDot.onclick = () => {
                if (importantWords.has(word.word)) {
                    importantWords.delete(word.word);
                    importantDot.style.backgroundColor = 'transparent';
                    updateImportantWordList();
                } else {
                    importantWords.add(word.word);
                    importantDot.style.backgroundColor = '#ff4444';
                    updateImportantWordList();
                }
                updateProgress();
                saveUserData();
            };
            
            const english = document.createElement('span');
            english.className = 'word-english';
            english.textContent = word.word;
            english.style.minWidth = 'auto';
            english.style.display = showEnglish ? 'inline-block' : 'none';
            english.style.marginRight = '5px';
            
            const phonetic = document.createElement('span');
            phonetic.className = 'word-phonetic';
            phonetic.textContent = word.phonetic || '';
            phonetic.style.minWidth = 'auto';
            phonetic.style.display = showEnglish ? 'inline-block' : 'none';
            phonetic.style.marginRight = '5px';
            
            const chinese = document.createElement('span');
            chinese.className = 'word-chinese';
            chinese.textContent = word.meaning;
            chinese.style.display = showEnglish ? 'none' : 'inline-block';
            chinese.style.minWidth = 'auto';
            chinese.style.marginTop = '0';
            
            // ÂàõÂª∫ÊåâÈíÆÂÆπÂô®
            const buttonContainer = document.createElement('div');
            buttonContainer.style.display = 'flex';
            buttonContainer.style.gap = '5px';
            buttonContainer.style.position = 'absolute';
            buttonContainer.style.right = '0';
            buttonContainer.style.top = '50%';
            buttonContainer.style.transform = 'translateY(-50%)';
            buttonContainer.style.backgroundColor = '#fff';
            buttonContainer.style.padding = '0 5px';
            
            const pronunciationBtn = document.createElement('button');
            pronunciationBtn.className = 'control-button';
            pronunciationBtn.style.padding = '2px 8px';
            pronunciationBtn.style.fontSize = '12px';
            pronunciationBtn.style.width = '40px';
            pronunciationBtn.style.backgroundColor = '#4CAF50';
            pronunciationBtn.innerHTML = 'üîä';
            pronunciationBtn.onclick = () => speakWithDifferentVoice(word.word);
            
            const toggleWordButton = document.createElement('button');
            toggleWordButton.className = 'control-button';
            toggleWordButton.style.padding = '2px 8px';
            toggleWordButton.style.fontSize = '12px';
            toggleWordButton.style.width = '40px';
            toggleWordButton.style.backgroundColor = '#008CBA';
            toggleWordButton.textContent = 'Êòæ';
            toggleWordButton.onclick = () => {
                if (showEnglish) {
                    chinese.style.display = chinese.style.display === 'none' ? 'inline-block' : 'none';
                    toggleWordButton.textContent = chinese.style.display === 'none' ? 'Êòæ' : 'Èöê';
                } else {
                    english.style.display = english.style.display === 'none' ? 'inline-block' : 'none';
                    phonetic.style.display = english.style.display;
                    toggleWordButton.textContent = english.style.display === 'none' ? 'Êòæ' : 'Èöê';
                }
            };
            
            const statusButton = document.createElement('button');
            statusButton.className = 'control-button';
            statusButton.style.padding = '2px 8px';
            statusButton.style.fontSize = '12px';
            statusButton.style.width = '40px';
            statusButton.style.backgroundColor = word.mastered ? '#4CAF50' : '#f44336';
            statusButton.innerHTML = word.mastered ? '‚úÖ' : '‚ùå';
            
            buttonContainer.appendChild(pronunciationBtn);
            buttonContainer.appendChild(toggleWordButton);
            buttonContainer.appendChild(statusButton);
            
            contentContainer.appendChild(importantDot);
            contentContainer.appendChild(english);
            contentContainer.appendChild(phonetic);
            contentContainer.appendChild(chinese);
            
            wordItem.appendChild(contentContainer);
            wordItem.appendChild(buttonContainer);
            
            wordListDiv.appendChild(wordItem);
        }
    });
    
    updateImportantWordList();
}

// ÂàõÂª∫ÊåâÈíÆÁªÑÂáΩÊï∞
function createButtonGroup(word, chinese, english, phonetic, line, isEnglishLine) {
    const buttonContainer = document.createElement('div');
    buttonContainer.style.display = 'flex';
    buttonContainer.style.gap = '5px';
    buttonContainer.style.marginLeft = 'auto';
    buttonContainer.style.flexShrink = '0';
    
    // Ê∑ªÂä†ÂèëÈü≥ÊåâÈíÆ
    const pronunciationBtn = document.createElement('button');
    pronunciationBtn.className = 'control-button';
    pronunciationBtn.style.padding = '2px 8px';
    pronunciationBtn.style.fontSize = '12px';
    pronunciationBtn.style.width = '60px';
    pronunciationBtn.style.backgroundColor = '#4CAF50';
    pronunciationBtn.innerHTML = 'üîä';
    pronunciationBtn.onclick = () => speakWithDifferentVoice(word.word);
    
    // Ê∑ªÂä†ÊòæÁ§∫/ÈöêËóèÊåâÈíÆ
    const toggleButton = document.createElement('button');
    toggleButton.className = 'control-button';
    toggleButton.style.padding = '2px 8px';
    toggleButton.style.fontSize = '12px';
    toggleButton.style.width = '60px';
    toggleButton.style.backgroundColor = '#008CBA';
    toggleButton.textContent = 'ÊòæÁ§∫';
    toggleButton.onclick = () => {
        if (showEnglish) {
            chinese.style.display = chinese.style.display === 'none' ? 'inline-block' : 'none';
            toggleButton.textContent = chinese.style.display === 'none' ? 'ÊòæÁ§∫' : 'ÈöêËóè';
            line.nextSibling.style.display = chinese.style.display === 'none' ? 'none' : 'flex';
        } else {
            english.style.display = english.style.display === 'none' ? 'inline-block' : 'none';
            phonetic.style.display = english.style.display;
            toggleButton.textContent = english.style.display === 'none' ? 'ÊòæÁ§∫' : 'ÈöêËóè';
            line.previousSibling.style.display = english.style.display === 'none' ? 'none' : 'flex';
        }
    };
    
    // Ê∑ªÂä†ÊéåÊè°Áä∂ÊÄÅÊåâÈíÆ
    const statusButton = document.createElement('button');
    statusButton.className = 'control-button';
    statusButton.style.padding = '2px 8px';
    statusButton.style.fontSize = '12px';
    statusButton.style.width = '60px';
    statusButton.style.backgroundColor = word.mastered ? '#4CAF50' : '#f44336';
    statusButton.innerHTML = word.mastered ? '‚úÖ' : '‚ùå';
    
    // Â∞ÜÊâÄÊúâÊåâÈíÆÊ∑ªÂä†Âà∞ÊåâÈíÆÂÆπÂô®
    buttonContainer.appendChild(pronunciationBtn);
    buttonContainer.appendChild(toggleButton);
    buttonContainer.appendChild(statusButton);
    
    // Ê∑ªÂä†ÈáçÁÇπÊ†áËÆ∞
    if (importantWords.has(word.word)) {
        const importantTag = document.createElement('span');
        importantTag.className = 'word-tag important-tag';
        importantTag.style.padding = '2px 8px';
        importantTag.style.fontSize = '12px';
        importantTag.textContent = 'ÈáçÁÇπ';
        buttonContainer.appendChild(importantTag);
    }
    
    return buttonContainer;
}

// Ëé∑ÂèñÂçïËØçÈü≥Ê†á
async function getPhonetic(word) {
    try {
        const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
        const data = await response.json();
        if (data && data[0] && data[0].phonetic) {
            return data[0].phonetic;
        }
        return '';
    } catch (error) {
        console.error('Ëé∑ÂèñÈü≥Ê†áÂ§±Ë¥•Ôºö', error);
        return '';
    }
}

// Êõ¥Êñ∞ÂçïËØçËÆ°Êï∞ÊòæÁ§∫
function updateWordCounter() {
    const totalWords = reviewRounds[currentRound].length;
    document.getElementById('currentWordNumber').textContent = currentWordIndex + 1;
    document.getElementById('totalWords').textContent = totalWords;
}

// Â§ÑÁêÜÊñá‰ª∂ÈÄâÊã©
function handleFileSelect(event) {
    const file = event.target.files[0];
    if (!file) {
        alert('ËØ∑ÈÄâÊã©Êñá‰ª∂ÔºÅ');
        return;
    }
    console.log('ÈÄâÊã©ÁöÑÊñá‰ª∂Ôºö', file.name);

    const reader = new FileReader();

    reader.onload = async function(e) {
        try {
            let newWords = [];
            if (file.name.endsWith('.csv')) {
                // CSVÊñá‰ª∂Â§ÑÁêÜ
                let text = e.target.result;
                if (text.charCodeAt(0) === 0xFEFF) {
                    text = text.slice(1);
                }
                
                const rows = text.split('\n');
                for (let i = 1; i < rows.length; i++) {
                    const row = rows[i].trim();
                    if (row) {
                        const columns = row.split(',');
                        if (columns.length >= 2) {
                            const word = columns[0].trim();
                            const phonetic = columns.length >= 3 ? columns[1].trim() : await getPhonetic(word);
                            const meaning = columns.length >= 3 ? columns[2].trim() : columns[1].trim();
                            
                            if (isValidChinese(meaning)) {
                                newWords.push({
                                    word: word,
                                    phonetic: phonetic,
                                    meaning: meaning,
                                    mastered: false,
                                    attempts: 0
                                });
                            } else {
                                const convertedMeaning = decodeGBK(meaning);
                                if (isValidChinese(convertedMeaning)) {
                                    newWords.push({
                                        word: word,
                                        phonetic: phonetic,
                                        meaning: convertedMeaning,
                                        mastered: false,
                                        attempts: 0
                                    });
                                }
                            }
                        }
                    }
                }
            } else {
                // ExcelÊñá‰ª∂Â§ÑÁêÜ
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {type: 'array'});
                const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                const jsonData = XLSX.utils.sheet_to_json(firstSheet);

                for (const row of jsonData) {
                    const word = row['ÂçïËØç'];
                    const phonetic = row['Èü≥Ê†á'] || await getPhonetic(word);
                    newWords.push({
                        word: word,
                        phonetic: phonetic,
                        meaning: row['Âê´‰πâ'],
                        mastered: false,
                        attempts: 0
                    });
                }
            }

            if (newWords.length === 0) {
                throw new Error('Ê≤°ÊúâÊâæÂà∞ÊúâÊïàÁöÑÂçïËØçÊï∞ÊçÆÔºÅ');
            }

            if (isAppendMode && allWords.length > 0) {
                // ËøΩÂä†Ê®°ÂºèÔºöÊ£ÄÊü•ÈáçÂ§çÂçïËØç
                const existingWords = new Set(allWords.map(w => w.word));
                const duplicates = newWords.filter(w => existingWords.has(w.word));
                
                if (duplicates.length > 0) {
                    const confirmMsg = `ÂèëÁé∞${duplicates.length}‰∏™ÈáçÂ§çÂçïËØçÔºåÊòØÂê¶‰ªçË¶ÅÊ∑ªÂä†Ôºü\n${
                        duplicates.map(w => w.word).join(', ')
                    }`;
                    if (!confirm(confirmMsg)) {
                        return;
                    }
                }
                
                // ËøΩÂä†Êñ∞ÂçïËØç
                allWords = [...allWords, ...newWords];
                alert(`ÊàêÂäüËøΩÂä† ${newWords.length} ‰∏™ÂçïËØçÔºÅ`);
            } else {
                // ÊõøÊç¢Ê®°Âºè
                allWords = newWords;
                alert(`ÊàêÂäüÂØºÂÖ• ${newWords.length} ‰∏™ÂçïËØçÔºÅ`);
            }

            // Êõ¥Êñ∞Á¨¨‰∏ÄËΩÆ
            reviewRounds[0] = [...allWords];
            
            // Êõ¥Êñ∞ÁïåÈù¢
            updateWordList();
            updateRoundButtons();
            updateProgress();
            saveUserData();

            // ÂºÄÂßãÂ§ç‰π†
            startReview(1);
        } catch (error) {
            console.error('Â§ÑÁêÜÊñá‰ª∂Êó∂Âá∫ÈîôÔºö', error);
            alert('Â§ÑÁêÜÊñá‰ª∂Êó∂Âá∫ÈîôÔºö' + error.message);
        }
    };

    try {
        if (file.name.endsWith('.csv')) {
            reader.readAsText(file, 'GB18030');
        } else {
            reader.readAsArrayBuffer(file);
        }
    } catch (error) {
        console.error('ËØªÂèñÊñá‰ª∂Êó∂Âá∫ÈîôÔºö', error);
        alert('ËØªÂèñÊñá‰ª∂Êó∂Âá∫ÈîôÔºÅ');
    }
}

// Ê£ÄÊü•ÊòØÂê¶ÊòØÊúâÊïàÁöÑ‰∏≠ÊñáÂ≠óÁ¨¶
function isValidChinese(str) {
    return /^[\u4e00-\u9fa5Ôºå„ÄÇÔºüÔºÅ„ÄÅÔºõÔºö""''ÔºàÔºâ„Äê„Äë„Ää„Äã]+$/.test(str);
}

// GBKÁºñÁ†ÅËΩ¨Êç¢ÂáΩÊï∞
function decodeGBK(str) {
    try {
        // ËøôÈáå‰ΩøÁî®‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊò†Â∞ÑÊù•Â§ÑÁêÜÂ∏∏ËßÅÁöÑ‰π±Á†ÅÊÉÖÂÜµ
        const gbkMap = {
            '∆ª': 'ËãπÊûú',
            '„Ω∂': 'È¶ôËïâ',
            // ÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÊ∑ªÂä†Êõ¥Â§öÁöÑÊò†Â∞Ñ
        };
        return gbkMap[str] || str;
    } catch (error) {
        console.error('ÁºñÁ†ÅËΩ¨Êç¢Â§±Ë¥•Ôºö', error);
        return str;
    }
}

// ÂºÄÂßãÂ§ç‰π†
function startReview(round) {
    console.log('ÂºÄÂßãÁ¨¨', round, 'ËΩÆÂ§ç‰π†');
    currentRound = round - 1;
    currentWordIndex = 0;

    console.log('ÂΩìÂâçËΩÆÊ¨°Ôºö', currentRound);
    console.log('ÂΩìÂâçËΩÆÊ¨°ÂçïËØçÔºö', reviewRounds[currentRound]);

    if (!reviewRounds[currentRound] || reviewRounds[currentRound].length === 0) {
        if (currentRound === 0) {
            // Ê£ÄÊü•ÊòØÂê¶ÊòØ‰ªéÁ¨¨9ËΩÆÂæ™ÁéØÂõûÊù•ÁöÑ
            const ninthRound = reviewRounds[8];
            if (ninthRound && ninthRound.length > 0) {
                const unmasteredWords = ninthRound.filter(word => !word.mastered);
                if (unmasteredWords.length > 0) {
                    reviewRounds[0] = unmasteredWords;
                    alert(`Á¨¨9ËΩÆÊúâ${unmasteredWords.length}‰∏™ÂçïËØçÊú™ÊéåÊè°ÔºåÂ∞ÜÁªßÁª≠Â≠¶‰π†Ëøô‰∫õÂçïËØç„ÄÇ`);
                } else {
                    alert('ËØ∑ÂÖàÂØºÂÖ•ÂçïËØçÔºÅ');
                    return;
                }
            } else {
                alert('ËØ∑ÂÖàÂØºÂÖ•ÂçïËØçÔºÅ');
                return;
            }
        } else {
            // Ëé∑Âèñ‰∏ä‰∏ÄËΩÆÊú™ÊéåÊè°ÁöÑÂçïËØç
            const previousRound = reviewRounds[currentRound - 1];
            if (!previousRound || previousRound.length === 0) {
                alert('Ê≤°Êúâ‰∏ä‰∏ÄËΩÆÁöÑÂçïËØçËÆ∞ÂΩïÔºÅ');
                return;
            }
            reviewRounds[currentRound] = previousRound.filter(word => !word.mastered);
        }
    }

    if (reviewRounds[currentRound].length === 0) {
        if (currentRound === 8) {
            // Â¶ÇÊûúÊòØÁ¨¨9ËΩÆÁªìÊùüÔºåÊ£ÄÊü•ÊòØÂê¶ÊâÄÊúâÂçïËØçÈÉΩÂ∑≤ÊéåÊè°
            const allMastered = reviewRounds.every(round => 
                !round || round.every(word => word.mastered)
            );
            if (allMastered) {
                alert('ÊÅ≠ÂñúÔºÅÊâÄÊúâÂçïËØçÈÉΩÂ∑≤ÊéåÊè°ÔºÅ');
            } else {
                alert('Êú¨ËΩÆÊ≤°ÊúâÈúÄË¶ÅÂ§ç‰π†ÁöÑÂçïËØçÔºÅËØ∑ËøîÂõûÁ¨¨1ËΩÆÁªßÁª≠Â≠¶‰π†Êú™ÊéåÊè°ÁöÑÂçïËØç„ÄÇ');
                // Ëá™Âä®Ë∑≥ËΩ¨Âà∞Á¨¨1ËΩÆ
                startReview(1);
            }
        } else {
            alert('Êú¨ËΩÆÊ≤°ÊúâÈúÄË¶ÅÂ§ç‰π†ÁöÑÂçïËØçÔºÅ');
        }
        return;
    }

    // Âú®ÊòæÁ§∫ÂçïËØçÂå∫Âüü‰πãÂâçÊ∑ªÂä†ËøõÂ∫¶Êõ¥Êñ∞
    updateProgress();
    
    // ÊòæÁ§∫ÂçïËØçÂå∫Âüü
    const wordSection = document.querySelector('.word-section');
    wordSection.style.display = 'block';
    
    // Á°Æ‰øùËÆ°Êï∞Âô®ÂíåÂçïËØçÈÉΩÊ≠£Á°ÆÊòæÁ§∫
    updateWordCounter();
    showCurrentWord();
}

// ÊòæÁ§∫ÂΩìÂâçÂçïËØç
function showCurrentWord() {
    const currentWord = reviewRounds[currentRound][currentWordIndex];
    console.log('ÊòæÁ§∫ÂçïËØçÔºö', currentWord);

    if (!currentWord) {
        console.log('Ê≤°ÊúâÊâæÂà∞ÂΩìÂâçÂçïËØç');
        alert('Êú¨ËΩÆÂ§ç‰π†ÂÆåÊàêÔºÅ');
        document.querySelector('.word-section').style.display = 'none';
        updateProgress();
        return;
    }

    const wordText = document.getElementById('wordText');
    const phoneticText = document.getElementById('phoneticText');
    const meaningText = document.getElementById('meaningText');
    
    wordText.textContent = currentWord.word;
    phoneticText.textContent = currentWord.phonetic || '';
    meaningText.textContent = currentWord.meaning;
    meaningText.style.display = 'none';
    
    // Êõ¥Êñ∞ÈáçÁÇπÊåâÈíÆÁä∂ÊÄÅ
    const importantButton = document.querySelector('.important-button');
    importantButton.classList.toggle('active', importantWords.has(currentWord.word));
    
    // Êõ¥Êñ∞‰∏ä‰∏Ä‰∏™ÊåâÈíÆÁä∂ÊÄÅ
    const previousButton = document.querySelector('button[onclick="previousWord()"]');
    if (previousButton) {
        previousButton.disabled = currentWordIndex === 0;
        previousButton.style.opacity = currentWordIndex === 0 ? '0.5' : '1';
    }
    
    // Ëá™Âä®Êí≠ÊîæÂèëÈü≥
    speakWithDifferentVoice(currentWord.word);
    
    console.log('ÂçïËØçÊòæÁ§∫Êõ¥Êñ∞ÂÆåÊàê');
    updateWordCounter();
    updateProgress();
}

// ÊòæÁ§∫ÂçïËØçÂê´‰πâ
function showMeaning() {
    document.getElementById('meaningText').style.display = 'block';
}

// Ê†áËÆ∞‰∏∫Â∑≤ÊéåÊè°
function markAsKnown() {
    const currentWord = reviewRounds[currentRound][currentWordIndex];
    if (!currentWord) return;
    
    currentWord.mastered = true;
    currentWord.attempts++;
    
    // Êõ¥Êñ∞ÊâÄÊúâËΩÆÊ¨°‰∏≠Ëøô‰∏™ÂçïËØçÁöÑÁä∂ÊÄÅ
    for (let round of reviewRounds) {
        const wordInRound = round.find(w => w.word === currentWord.word);
        if (wordInRound) {
            wordInRound.mastered = true;
        }
    }
    
    // Êõ¥Êñ∞‰∏ªÂçïËØçÂàóË°®‰∏≠ÁöÑÁä∂ÊÄÅ
    const mainWordIndex = allWords.findIndex(w => w.word === currentWord.word);
    if (mainWordIndex !== -1) {
        allWords[mainWordIndex].mastered = true;
        allWords[mainWordIndex].attempts = currentWord.attempts;
    }
    
    // Êõ¥Êñ∞ÁïåÈù¢Âíå‰øùÂ≠òÊï∞ÊçÆ
    updateWordList();
    updateRoundButtons();
    updateProgress();
    saveUserData();
    
    nextWord();
}

// Ê†áËÆ∞‰∏∫Êú™ÊéåÊè°
function markAsUnknown() {
    const currentWord = reviewRounds[currentRound][currentWordIndex];
    if (!currentWord) return;
    
    currentWord.mastered = false;
    currentWord.attempts++;
    
    // Êõ¥Êñ∞ÊâÄÊúâËΩÆÊ¨°‰∏≠Ëøô‰∏™ÂçïËØçÁöÑÁä∂ÊÄÅ
    for (let round of reviewRounds) {
        const wordInRound = round.find(w => w.word === currentWord.word);
        if (wordInRound) {
            wordInRound.mastered = false;
        }
    }
    
    // Êõ¥Êñ∞‰∏ªÂçïËØçÂàóË°®‰∏≠ÁöÑÁä∂ÊÄÅ
    const mainWordIndex = allWords.findIndex(w => w.word === currentWord.word);
    if (mainWordIndex !== -1) {
        allWords[mainWordIndex].mastered = false;
        allWords[mainWordIndex].attempts = currentWord.attempts;
    }
    
    // Êõ¥Êñ∞ÁïåÈù¢Âíå‰øùÂ≠òÊï∞ÊçÆ
    updateWordList();
    updateRoundButtons();
    updateProgress();
    saveUserData();
    
    nextWord();
}

// ‰∏ã‰∏Ä‰∏™ÂçïËØç
function nextWord() {
    currentWordIndex++;
    if (currentWordIndex >= reviewRounds[currentRound].length) {
        const unmasteredCount = reviewRounds[currentRound].filter(word => !word.mastered).length;
        if (currentRound === 8 && unmasteredCount > 0) {
            alert(`Êú¨ËΩÆÂ§ç‰π†ÂÆåÊàêÔºÅËøòÊúâ${unmasteredCount}‰∏™ÂçïËØçÊú™ÊéåÊè°ÔºåÂ∞ÜËøîÂõûÁ¨¨1ËΩÆÁªßÁª≠Â≠¶‰π†„ÄÇ`);
            document.querySelector('.word-section').style.display = 'none';
            updateProgress();
            setTimeout(() => startReview(1), 1500);
        } else {
            alert('Êú¨ËΩÆÂ§ç‰π†ÂÆåÊàêÔºÅ');
            document.querySelector('.word-section').style.display = 'none';
            updateProgress();
        }
        return;
    }
    showCurrentWord();
}

// Êõ¥Êñ∞ËΩÆÊ¨°ÊåâÈíÆÊòæÁ§∫
function updateRoundButtons() {
    for (let round = 1; round <= 9; round++) {
        const button = document.querySelector(`button[onclick="startReview(${round})"]`);
        const currentRoundWords = reviewRounds[round - 1];
        const previousRoundWords = round > 1 ? reviewRounds[round - 2] : null;
        
        if (previousRoundWords) {
            const unmasteredCount = previousRoundWords.filter(word => !word.mastered).length;
            if (unmasteredCount > 0) {
                button.innerHTML = `Á¨¨${round}ËΩÆ <span class="unmastered-count">(${unmasteredCount})</span>`;
            } else {
                button.innerHTML = `Á¨¨${round}ËΩÆ`;
            }
        } else {
            // Á¨¨‰∏ÄËΩÆÊòæÁ§∫ÊÄªÂçïËØçÊï∞
            if (round === 1 && currentRoundWords) {
                const totalCount = currentRoundWords.length;
                button.innerHTML = `Á¨¨1ËΩÆ <span class="unmastered-count">(${totalCount})</span>`;
            }
        }
    }
}

// Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁôªÂΩï
function checkLogin() {
    const isAuthorized = localStorage.getItem('isAuthorized');
    const authCode = localStorage.getItem('authCode');
    
    if (isAuthorized === 'true' && authCode) {
        // Â¶ÇÊûúÊòØÊ∞∏‰πÖÊéàÊùÉÁ†ÅÔºåÁõ¥Êé•ÈÄöËøá
        if (authCode === 'SUNNY888888') {
            showMainContent();
            loadUserData();
            updateExpirationInfo();
            return;
        }
        
        // Âê¶ÂàôÊ£ÄÊü•ÊòØÂê¶ËøáÊúü
        if (isExpired()) {
            // Ê∏ÖÈô§ËøáÊúüÁöÑÊéàÊùÉ‰ø°ÊÅØ
            localStorage.removeItem('isAuthorized');
            localStorage.removeItem('authCode');
            localStorage.removeItem('expirationDate');
            return;
        }
        
        showMainContent();
        loadUserData();
        updateExpirationInfo();
    }
}

// ÁôªÂΩïÂáΩÊï∞
function login() {
    const authCode = document.getElementById('authCode').value.trim();
    
    if (!authCode) {
        alert('ËØ∑ËæìÂÖ•ÊéàÊùÉÁ†ÅÔºÅ');
        return;
    }

    // Ê£ÄÊü•ÊéàÊùÉÁ†ÅÊòØÂê¶ÊúâÊïà
    if (!AUTH_CODES.has(authCode)) {
        alert('ÊéàÊùÉÁ†ÅÈîôËØØÔºÅ');
        document.getElementById('authCode').value = '';
        return;
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊòØÊ∞∏‰πÖÊéàÊùÉÁ†Å
    if (authCode !== 'SUNNY888888') {
        // Ê£ÄÊü•ÊòØÂê¶ËøáÊúüÔºàÂè™ÂØπÈùûÊ∞∏‰πÖÊéàÊùÉÁ†ÅÊ£ÄÊü•Ôºâ
        if (isExpired()) {
            alert('ÂΩìÂâçÊéàÊùÉÁ†ÅÂ∑≤ËøáÊúüÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòËé∑ÂèñÊñ∞ÁöÑÊéàÊùÉÁ†ÅÔºÅ');
            document.getElementById('authCode').value = '';
            return;
        }
    }

    // ‰øùÂ≠òÊéàÊùÉÁä∂ÊÄÅÂíå‰ΩøÁî®ÁöÑÊéàÊùÉÁ†Å
    localStorage.setItem('isAuthorized', 'true');
    localStorage.setItem('authCode', authCode);
    if (authCode !== 'SUNNY888888') {
        localStorage.setItem('expirationDate', EXPIRATION_DATE.toISOString());
    }

    showMainContent();
    loadUserData();
    updateExpirationInfo();
}

// ÊòæÁ§∫‰∏ªË¶ÅÂÜÖÂÆπ
function showMainContent() {
    document.getElementById('loginSection').style.display = 'none';
    document.getElementById('mainContainer').style.display = 'flex';
    document.getElementById('userInfo').style.display = 'flex';
}

// ÈÄÄÂá∫ÁôªÂΩï
function logout() {
    // ÂÖà‰øùÂ≠òÊï∞ÊçÆ
    saveUserData();
    
    // Ê∏ÖÈô§ÊéàÊùÉ‰ø°ÊÅØ
    localStorage.removeItem('isAuthorized');
    localStorage.removeItem('authCode');
    localStorage.removeItem('expirationDate');
    
    // ÈáçÁΩÆÊï∞ÊçÆ
    allWords = [];
    reviewRounds = Array(9).fill().map(() => []);
    currentRound = 0;
    currentWordIndex = 0;
    importantWords.clear();
    
    // Áõ¥Êé•‰øÆÊîπ DOM ÊòæÁ§∫Áä∂ÊÄÅ
    const mainContainer = document.getElementById('mainContainer');
    const loginSection = document.getElementById('loginSection');
    const userInfo = document.getElementById('userInfo');
    
    if (mainContainer) mainContainer.style.display = 'none';
    if (loginSection) loginSection.style.display = 'flex';
    if (userInfo) userInfo.style.display = 'none';
    
    // Ê∏ÖÁ©∫ÊéàÊùÉÁ†ÅËæìÂÖ•Ê°Ü
    const authCodeInput = document.getElementById('authCode');
    if (authCodeInput) authCodeInput.value = '';
    
    // ÈáçÁΩÆÂÖ∂‰ªñUIÂÖÉÁ¥†
    const wordList = document.getElementById('wordList');
    const wordSection = document.querySelector('.word-section');
    
    if (wordList) wordList.innerHTML = '';
    if (wordSection) wordSection.style.display = 'none';
    
    // Êõ¥Êñ∞ËøõÂ∫¶ÊòæÁ§∫
    updateProgress();
}

// ‰øùÂ≠òÁî®Êà∑Êï∞ÊçÆ
function saveUserData() {
    const userData = {
        allWords,
        reviewRounds,
        currentRound,
        currentWordIndex,
        importantWords: Array.from(importantWords),
        lastSaved: new Date().toISOString()
    };
    
    // ‰øùÂ≠òÂà∞ localStorage
    localStorage.setItem('userData', JSON.stringify(userData));
    console.log('Êï∞ÊçÆÂ∑≤‰øùÂ≠ò -', new Date().toLocaleString());
}

// Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆ
function loadUserData() {
    const savedData = localStorage.getItem('userData');
    if (savedData) {
        try {
            const userData = JSON.parse(savedData);
            allWords = userData.allWords || [];
            reviewRounds = userData.reviewRounds || Array(9).fill().map(() => []);
            currentRound = userData.currentRound || 0;
            currentWordIndex = userData.currentWordIndex || 0;
            importantWords = new Set(userData.importantWords || []);
            
            // Âä†ËΩΩËøΩÂä†Ê®°ÂºèÁä∂ÊÄÅ
            isAppendMode = localStorage.getItem('appendMode') === 'true';
            const statusSpan = document.getElementById('appendModeStatus');
            const appendButton = document.querySelector('.append-button');
            if (statusSpan && appendButton) {
                statusSpan.textContent = isAppendMode ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠';
                appendButton.classList.toggle('active', isAppendMode);
            }
            
            // Êõ¥Êñ∞ÁïåÈù¢
            updateWordList();
            updateRoundButtons();
            updateProgress();
            
            if (allWords.length > 0 && userData.lastSaved) {
                const lastSaved = new Date(userData.lastSaved);
                const timeAgo = Math.round((new Date() - lastSaved) / 1000 / 60);
                console.log(`Â∑≤Âä†ËΩΩ${timeAgo}ÂàÜÈíüÂâçÁöÑÂ≠¶‰π†ËøõÂ∫¶`);
            }
        } catch (error) {
            console.error('Âä†ËΩΩÊï∞ÊçÆÂá∫ÈîôÔºö', error);
            alert('Âä†ËΩΩÊï∞ÊçÆÂá∫ÈîôÔºåÂ∞ÜÈáçÊñ∞ÂºÄÂßã');
        }
    }
}

// Â¢ûÂä†Ëá™Âä®‰øùÂ≠òÁöÑÈ¢ëÁéáÔºàÊØè30ÁßíÔºâ
setInterval(saveUserData, 30000);

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÊ£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
window.addEventListener('load', function() {
    initVoices();
    checkLogin();
});

// Êõ¥Êñ∞ËøõÂ∫¶ÁöÑÂáΩÊï∞
function updateProgress() {
    if (allWords.length === 0) {
        document.getElementById('totalWordsCount').textContent = '0';
        document.getElementById('masteredCount').textContent = '0';
        document.getElementById('unmasteredCount').textContent = '0';
        document.getElementById('importantWordsCount').textContent = '0';
        document.getElementById('progressBar').style.width = '0%';
        document.getElementById('progressText').textContent = '0%';
        return;
    }

    const totalWords = allWords.length;
    const masteredWords = allWords.filter(word => word.mastered).length;
    const unmasteredWords = totalWords - masteredWords;
    const importantWordsCount = importantWords.size;
    const progressPercentage = Math.round((masteredWords / totalWords) * 100);

    // Êõ¥Êñ∞ÁªüËÆ°Êï∞Â≠ó
    document.getElementById('totalWordsCount').textContent = totalWords;
    document.getElementById('masteredCount').textContent = masteredWords;
    document.getElementById('unmasteredCount').textContent = unmasteredWords;
    document.getElementById('importantWordsCount').textContent = importantWordsCount;

    // Êõ¥Êñ∞ËøõÂ∫¶Êù°
    document.getElementById('progressBar').style.width = `${progressPercentage}%`;
    document.getElementById('progressText').textContent = `${progressPercentage}%`;

    // Ê†πÊçÆËøõÂ∫¶ÊîπÂèòËøõÂ∫¶Êù°È¢úËâ≤
    const progressBar = document.getElementById('progressBar');
    if (progressPercentage < 30) {
        progressBar.style.background = 'linear-gradient(45deg, #ff5722, #f4511e)';
    } else if (progressPercentage < 70) {
        progressBar.style.background = 'linear-gradient(45deg, #ff9800, #fb8c00)';
    } else {
        progressBar.style.background = 'linear-gradient(45deg, #4CAF50, #45a049)';
    }
}

// ÂàáÊç¢ÊòæÁ§∫Ê®°Âºè
function toggleDisplayMode() {
    showEnglish = !showEnglish;
    const toggleButton = document.getElementById('toggleDisplayMode');
    toggleButton.textContent = showEnglish ? 'ÊòæÁ§∫‰∏≠Êñá' : 'ÊòæÁ§∫Ëã±Êñá';
    updateWordList();
}

// ÂàáÊç¢ÂçïËØçÁöÑÈáçÁÇπÁä∂ÊÄÅ
function toggleImportant() {
    const currentWord = reviewRounds[currentRound][currentWordIndex];
    if (!currentWord) return;

    const wordKey = currentWord.word;
    if (importantWords.has(wordKey)) {
        importantWords.delete(wordKey);
    } else {
        importantWords.add(wordKey);
    }

    // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
    const importantButton = document.querySelector('.important-button');
    importantButton.classList.toggle('active', importantWords.has(wordKey));

    // Êõ¥Êñ∞ÁïåÈù¢Âíå‰øùÂ≠òÊï∞ÊçÆ
    updateImportantWordList();
    updateProgress();
    saveUserData();
}

// Êõ¥Êñ∞ÈáçÁÇπÂçïËØçÂàóË°®ÊòæÁ§∫
function updateImportantWordList() {
    const importantWordListDiv = document.getElementById('importantWordList');
    importantWordListDiv.innerHTML = '';
    
    const importantWordArray = allWords.filter(word => importantWords.has(word.word));
    
    importantWordArray.forEach(word => {
        const wordItem = document.createElement('div');
        wordItem.className = 'word-list-item';
        
        const contentContainer = document.createElement('div');
        contentContainer.style.flex = '1';
        
        const english = document.createElement('span');
        english.className = 'word-english';
        english.textContent = word.word;
        
        const phonetic = document.createElement('span');
        phonetic.className = 'word-phonetic';
        phonetic.textContent = word.phonetic || '';
        
        const chinese = document.createElement('span');
        chinese.className = 'word-chinese';
        chinese.textContent = word.meaning;
        
        const pronunciationBtn = document.createElement('button');
        pronunciationBtn.className = 'pronunciation-button';
        pronunciationBtn.innerHTML = 'üîä ÂèëÈü≥';
        pronunciationBtn.onclick = () => speakWithDifferentVoice(word.word);
        
        const removeContainer = document.createElement('div');
        removeContainer.style.marginLeft = 'auto';
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'control-button';
        removeBtn.style.backgroundColor = '#f44336';
        removeBtn.style.padding = '5px 10px';
        removeBtn.innerHTML = 'ÁßªÈô§';
        removeBtn.onclick = () => {
            importantWords.delete(word.word);
            // Êõ¥Êñ∞ÊâÄÊúâÁõ∏ÂÖ≥ÊòæÁ§∫
            updateImportantWordList();
            updateWordList();
            updateProgress();
            saveUserData();
            
            // Êü•ÊâæÂπ∂Êõ¥Êñ∞‰∏ªÂàóË°®‰∏≠ÂØπÂ∫îÂçïËØçÁöÑÁ∫¢ÁÇπ
            const wordListItems = document.querySelectorAll('.word-list-item');
            wordListItems.forEach(item => {
                const englishSpan = item.querySelector('.word-english');
                if (englishSpan && englishSpan.textContent === word.word) {
                    const dot = item.querySelector('span[style*="border-radius: 50%"]');
                    if (dot) {
                        dot.style.backgroundColor = 'transparent';
                    }
                }
            });
        };
        
        const topLine = document.createElement('div');
        topLine.style.display = 'flex';
        topLine.style.alignItems = 'center';
        topLine.appendChild(english);
        topLine.appendChild(phonetic);
        topLine.appendChild(pronunciationBtn);
        contentContainer.appendChild(topLine);
        contentContainer.appendChild(chinese);
        
        removeContainer.appendChild(removeBtn);
        
        const flexContainer = document.createElement('div');
        flexContainer.style.display = 'flex';
        flexContainer.style.alignItems = 'center';
        flexContainer.style.gap = '10px';
        
        flexContainer.appendChild(contentContainer);
        flexContainer.appendChild(removeContainer);
        
        wordItem.appendChild(flexContainer);
        importantWordListDiv.appendChild(wordItem);
    });
    
    const importantCount = document.getElementById('importantCount');
    importantCount.textContent = `(${importantWords.size})`;
}

// ÂºÄÂßãÈáçÁÇπÂçïËØçÂ§ç‰π†
function startImportantReview() {
    const importantWordArray = allWords.filter(word => importantWords.has(word.word));
    
    if (importantWordArray.length === 0) {
        alert('Ê≤°ÊúâÈáçÁÇπÂçïËØçÔºÅ');
        return;
    }
    
    // ÈáçÁΩÆÊâÄÊúâËΩÆÊ¨°
    reviewRounds = Array(9).fill().map(() => []);
    // ËÆæÁΩÆÁ¨¨‰∏ÄËΩÆ‰∏∫ÈáçÁÇπÂçïËØç
    reviewRounds[0] = importantWordArray.map(word => ({...word, mastered: false, attempts: 0}));
    
    currentRound = 0;
    currentWordIndex = 0;
    
    // Êõ¥Êñ∞ÁïåÈù¢
    updateRoundButtons();
    
    // ÂºÄÂßãÂ§ç‰π†
    startReview(1);
}

// ÂàáÊç¢ËøΩÂä†Ê®°Âºè
function toggleAppendMode() {
    isAppendMode = !isAppendMode;
    const statusSpan = document.getElementById('appendModeStatus');
    const appendButton = document.querySelector('.append-button');
    
    statusSpan.textContent = isAppendMode ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠';
    appendButton.classList.toggle('active', isAppendMode);
    
    // ‰øùÂ≠òËøΩÂä†Ê®°ÂºèÁä∂ÊÄÅ
    if (currentUser) {
        localStorage.setItem(`appendMode_${currentUser}`, isAppendMode);
    }
}

// Ê∏ÖÁ©∫ÊâÄÊúâÂçïËØç
function clearAllWords() {
    if (!currentUser) {
        alert('ËØ∑ÂÖàÁôªÂΩïÔºÅ');
        return;
    }

    if (allWords.length === 0) {
        alert('ÂΩìÂâçÊ≤°ÊúâÂçïËØçÂèØÊ∏ÖÁ©∫ÔºÅ');
        return;
    }

    if (confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÂçïËØçÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºÅ')) {
        // Ê∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆ
        allWords = [];
        reviewRounds = Array(9).fill().map(() => []);
        currentRound = 0;
        currentWordIndex = 0;
        importantWords.clear();

        // Êõ¥Êñ∞ÁïåÈù¢
        updateWordList();
        updateRoundButtons();
        updateProgress();
        document.querySelector('.word-section').style.display = 'none';

        // ‰øùÂ≠òÊõ¥Êîπ
        saveUserData();
        alert('ÊâÄÊúâÂçïËØçÂ∑≤Ê∏ÖÁ©∫ÔºÅ');
    }
}

// Ê∑ªÂä†ÂØºÂá∫ÂäüËÉΩ
function exportWordList(type) {
    let words = [];
    let title = '';
    
    if (type === 'important') {
        words = allWords.filter(word => importantWords.has(word.word));
        title = 'ÈáçÁÇπÂçïËØçÂàóË°®';
    } else if (type === 'unmastered') {
        words = allWords.filter(word => !word.mastered);
        title = 'Êú™ÊéåÊè°ÂçïËØçÂàóË°®';
    }
    
    if (words.length === 0) {
        alert(`Ê≤°Êúâ${type === 'important' ? 'ÈáçÁÇπ' : 'Êú™ÊéåÊè°'}ÂçïËØçÔºÅ`);
        return;
    }
    
    // ÂàõÂª∫ÊâìÂç∞Á™óÂè£ÁöÑÂÜÖÂÆπ
    const printContent = `
        <html>
        <head>
            <title>${title}</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    padding: 20px;
                    max-width: 800px;
                    margin: 0 auto;
                }
                h1 {
                    text-align: center;
                    color: #333;
                    margin-bottom: 20px;
                }
                .word-item {
                    padding: 10px;
                    border-bottom: 1px solid #eee;
                    display: flex;
                    align-items: center;
                }
                .word-item:last-child {
                    border-bottom: none;
                }
                .word-english {
                    font-weight: bold;
                    min-width: 150px;
                }
                .word-phonetic {
                    color: #666;
                    min-width: 120px;
                    margin: 0 20px;
                }
                .word-chinese {
                    color: #333;
                }
                @media print {
                    body {
                        padding: 0;
                    }
                    .word-item {
                        page-break-inside: avoid;
                    }
                }
            </style>
        </head>
        <body>
            <h1>${title}</h1>
            ${words.map((word, index) => `
                <div class="word-item">
                    <span class="word-english">${word.word}</span>
                    <span class="word-phonetic">${word.phonetic || ''}</span>
                    <span class="word-chinese">${word.meaning}</span>
                </div>
            `).join('')}
        </body>
        </html>
    `;
    
    // ÂàõÂª∫Êñ∞Á™óÂè£Âπ∂ÊâìÂç∞
    const printWindow = window.open('', '_blank');
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    
    // Á≠âÂæÖÂõæÁâáÂä†ËΩΩÂÆåÊàêÂêéÊâìÂç∞
    setTimeout(() => {
        printWindow.print();
        // ÊâìÂç∞ÂÆåÊàêÂêéÂÖ≥Èó≠Á™óÂè£
        printWindow.onafterprint = function() {
            printWindow.close();
        };
    }, 500);
}

// Ê∑ªÂä†‰∏ä‰∏Ä‰∏™ÂçïËØçÁöÑÂáΩÊï∞
function previousWord() {
    if (currentWordIndex > 0) {
        currentWordIndex--;
        showCurrentWord();
    } else {
        alert('Â∑≤ÁªèÊòØÊú¨ËΩÆÁ¨¨‰∏Ä‰∏™ÂçïËØç‰∫ÜÔºÅ');
    }
}

// Ê∑ªÂä†È°µÈù¢ÂÖ≥Èó≠Êó∂ÁöÑ‰øùÂ≠òÂäüËÉΩ
window.addEventListener('beforeunload', function(e) {
    saveUserData();
});

// Ê∑ªÂä†Êõ¥Êñ∞Âà∞ÊúüÊó∂Èó¥ÊòæÁ§∫ÁöÑÂáΩÊï∞
function updateExpirationInfo() {
    const expirationInfo = document.getElementById('expirationInfo');
    const authCode = localStorage.getItem('authCode');
    
    if (authCode === 'SUNNY888888') {
        expirationInfo.textContent = 'Ê∞∏‰πÖÊéàÊùÉ';
        return;
    }
    
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const expirationDay = new Date(EXPIRATION_DATE.getFullYear(), EXPIRATION_DATE.getMonth(), EXPIRATION_DATE.getDate());
    const daysLeft = Math.ceil((expirationDay - today) / (1000 * 60 * 60 * 24));
    
    if (daysLeft > 0) {
        expirationInfo.textContent = `ÊéàÊùÉÂâ©‰Ωô ${daysLeft} Â§©`;
    } else {
        expirationInfo.textContent = 'ÊéàÊùÉÂ∑≤ËøáÊúü';
        setTimeout(() => {
            alert('ÊéàÊùÉÂ∑≤ËøáÊúüÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòËé∑ÂèñÊñ∞ÁöÑÊéàÊùÉÁ†ÅÔºÅ');
            logout();
        }, 1000);
    }
}

// Ê∑ªÂä†ÂÆöÊó∂Êõ¥Êñ∞Âà∞ÊúüÊó∂Èó¥ÊòæÁ§∫
setInterval(updateExpirationInfo, 60000); // ÊØèÂàÜÈíüÊõ¥Êñ∞‰∏ÄÊ¨° 